version: '3'

# 가정 1. 현재 폴더가 /Users/thruthesky/www/docker/ 라고 가정한다.
#   이 것은 `git clone https://github.com/thruthesky/docker /Users/thruthesky/www/docker` 와 같이 한 것과 같다.
#
#   /Users/thruthesky/www/docker/ 폴더에는 docker 와 관련된 파일이 저장되고,
#   /Users/thruthesky/www/docker/etc 폴더에는 각종 서비스 설정 파일이 저장된다. 예) nginx.conf, php.ini
#   /Users/thruthesky/www/docker/mysqldata 폴더에는 mysql 또는 mariadb 데이터베이스의 데이터 파일이 저장되고,
#   /Users/thruthesky/www/docker/logs 폴더에는 각종 로그 파일이 저장된다.
#   /Users/thruthesky/www/docker/home 폴더는 개별 도메인의 홈 폴더로서, nginx 에 의해서 연결된다. 이 폴더는 기본적으로 .gitignore 에 등록되어져
#   있다. 즉, home 폴더 아래에서 다른 git repo 를 clone 해도 된다.
#
#   /Users/thruthesky/www 폴더는 임시로 가정하는 폴더이다.
#   다른 Host(예: 우분투 서버)에 설치를 할 때에는 /Users/thruthesky/www 대신, /docker 나 /home/user/docker 와 같이 어느 폴더라도 상관이 없이,
#   Host OS 의 현재 폴더가 Guest OS 의 루트 폴더가 된다.



services:
  nginx:
    image: nginx:1.19.7-alpine
    container_name: www_docker_nginx
    volumes:
      # 현재 컴퓨터(Host OS)의 현재 폴더(/Users/thruthesky/www/docker)를 Guest OS 의 /docker 경로로 재지정(연결, 또는 링크)한다.
      # 이렇게 함으로서, Guest OS 의 /docker  폴더는 /Users/thruthesky/www/docker 폴더가 된다.
      - .:/docker
      # Host OS 의 /Users/thruthesky/www/docker/etc/nginx.conf 를 Guest OS 의 /etc/nginx/nginx.conf 로 링크한다.
      - ./etc/nginx.conf:/etc/nginx/nginx.conf

      # Host OS 의 /Users/thruthesky/www/docker/home 폴더를 Guest OS /home 폴더로 연결한다.
      - ./home:/home
      # Host OS 의 /Users/thruthesky/www/docker/logs/nginx 폴더를 Guest OS 의 /etc/nginx/logs 로 링크.
      # 로그 폴더 mount. 기본적으로 /etc/nginx/logs 폴더에 로그가 기록되는데, 이 폴더를 HOST OS 로 지정해서, 로그가 HOST OS 에 쌓이도록 한다.
      # Nginx 설정에서 logs/access.log 라고 지정하면 /Users/thruthesky/docker/emp/docker/logs/access.log 가 된다.
      - ./logs/nginx:/etc/nginx/logs # HOST OS 에 로그를 기록해서, 로그를 쉽게 볼 수 있도록 한다.

    # 포트 지정. Host OS 의 포트를 Guest OS 로 연결
    ports:
      - "80:80"
      - "443:443"

  # PHP 의 기본 설정 파일은 컨테이너의 /usr/local/etc 에 있다.
  php:
    container_name: www_docker_php
    build:
      context: .
      dockerfile: Dockerfile.php # 별도의 Dockerfile 로 이미지를 생성하고, mysqli extension 설치를 하기 때문에, Dockerfile 로 작업한다.
    volumes:
      # nginx 설정과 같이 Host OS 의 /Users/thruthesky/www/docker 를 Guest OS 의 /docker 로 연결
      - .:/docker
      # Host OS 의 /Users/thruthesky/www/docker/etc/php.ini 를 Guest OS 의 /user/local/etc/php/php.ini 로 연결
      - ./etc/php.ini:/usr/local/etc/php/php.ini

  # MariaDB 설정
  # 주의: 각종 계정이나 루트 비번을 설정하면, DB 에 기록된다. 그래서 나중에 다시 변경하려면 DB 에서 변경을 해야 한다.
  mariadb:
    image: mariadb:latest
    container_name: www_docker_mariadb
    environment:
      - MYSQL_DATABASE=centerx # 처음 이미지 생성 후, 컨테이너 실행시, DB 를 준비한다. 덮어쓰지 않음.
      - MYSQL_USER=centerx # 컨테이너 실행시, 사용자를 지정한다.
      - MYSQL_PASSWORD=Wc~Cx7
      - MYSQL_ROOT_PASSWORD=Wc~Cx7 # 컨테이너 실행시, 관리자 비밀번호.
    volumes:
#      - ./etc:/etc/mysql # mysql 설정을 ./etc 에 지정한다. 굳이 mysql 설정은 안해도 된다. 기본 설정이 충분하다.

      # HOST OS 폴더의 /Users/thruthesky/www/docker/mysqldata 를 Guest OS 의 /var/lib/mysql 에 링크. 이렇게 해서,
      # MariaDB(또는 mysql) database 파일을 Host OS 폴더에 저장한다. 즉, MariaDB 데이터 파일이 Host OS 에 저장되는 것이다.
      # 즉, Docker container 또는 image 가 삭제되어도, 자료는 HOST OS 에 저장된다.
      # 참고로, 이 경로는 처음 docker-compose up 으로 설치 하기 전에 지정해야한다.
      # 만약, 나중에 지정을 하면, docker system prune -a(또는 docker image 삭제)를 하고, 다시 설치해야 한다.
      - ./mysqldata:/var/lib/mysql

    # DB 포트 연결
    ports:
      - "3306:3306"

volumes:
  mysqldata: {}
